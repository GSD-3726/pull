name: Trigger Gitee pipeline

on:
  push:
    branches:
      - master        # 在 GitHub push 到 master 时触发（按需修改）
  workflow_dispatch:  # 手动触发也支持

jobs:
  trigger-gitee:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq (for JSON parsing)
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: Trigger Gitee by creating/updating a tiny file
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}   # 你已设置
          GITEE_REPO: ${{ secrets.GITEE_REPO }}     # 格式：owner/repo（例如 bmg369/test）
          BRANCH: master
        run: |
          set -euo pipefail

          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          FILEPATH=".github/gh-trigger.txt"
          MESSAGE="ci: trigger from github at ${TIMESTAMP}"
          CONTENT="Triggered from GitHub at ${TIMESTAMP}"
          ENCODED_CONTENT=$(printf "%s" "$CONTENT" | base64)

          API_BASE="https://gitee.com/api/v5/repos/${GITEE_REPO}/contents/${FILEPATH}"

          # Try create
          HTTP_CODE=$(curl -s -o /tmp/resp_create.json -w "%{http_code}" -X POST "${API_BASE}" \
            -d "access_token=${GITEE_TOKEN}" \
            -d "content=${ENCODED_CONTENT}" \
            -d "branch=${BRANCH}" \
            -d "message=${MESSAGE}" || true)

          if [ "$HTTP_CODE" = "201" ]; then
            echo "Created trigger file successfully."
            cat /tmp/resp_create.json | jq .
            exit 0
          fi

          # 如果文件已存在或其他情况，先获取 sha 再更新
          echo "Create returned HTTP $HTTP_CODE, try to get file meta and update instead."
          GET_URL="https://gitee.com/api/v5/repos/${GITEE_REPO}/contents/${FILEPATH}?access_token=${GITEE_TOKEN}&ref=${BRANCH}"
          META=$(curl -s "${GET_URL}")
          SHA=$(echo "$META" | jq -r .sha // empty)

          if [ -z "$SHA" ] || [ "$SHA" = "null" ]; then
            echo "无法获取文件 sha，响应:"
            echo "$META"
            # 如果没有 sha，尝试使用 commit api：简单 fallback —— 用 git push via HTTP（可加）
            exit 1
          fi

          PUT_CODE=$(curl -s -o /tmp/resp_put.json -w "%{http_code}" -X PUT "${API_BASE}" \
            -d "access_token=${GITEE_TOKEN}" \
            -d "content=${ENCODED_CONTENT}" \
            -d "branch=${BRANCH}" \
            -d "message=${MESSAGE}" \
            -d "sha=${SHA}" )

          if [ "$PUT_CODE" = "200" ] || [ "$PUT_CODE" = "201" ]; then
            echo "Updated trigger file successfully."
            cat /tmp/resp_put.json | jq .
            exit 0
          fi

          echo "更新失败，HTTP_CODE=${PUT_CODE}"
          cat /tmp/resp_put.json
          exit 1
